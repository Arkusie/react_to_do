{"version":3,"sources":["components/Button.jsx","components/ListItem.jsx","containers/ListContainer.jsx","containers/ListForm.jsx","Data/ToDosData.js","containers/ToDo.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","onClick","text","ListItem","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deteleItem","toDo","id","editItem","setState","isEdited","handleChange","event","defineProperty","target","name","value","handleDecline","content","handleAccept","state","Fragment","components_Button","bind","className","onChange","React","Component","ListContainer","allToDos","toDos","map","key","components_ListItem","handleDelete","handleEdit","ListForm","preventDefault","addToDos","uuid","onSubmit","handleSubmit","placeholder","type","toDoData","Todo","filteredEl","filter","el","newContent","acceptEl","newToDos","push","containers_ListForm","handleAddTodos","containers_ListContainer","App","ToDo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f5dc03c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Button(props) {\r\n  return <button onClick={props.onClick}>{props.text}</button>;\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nclass ListItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEdited: false,\r\n      content: props.toDo.content\r\n    };\r\n  }\r\n\r\n  deteleItem = () => {\r\n    this.props.deteleItem(this.props.toDo.id);\r\n  };\r\n\r\n  editItem = () => {\r\n    this.setState({\r\n      isEdited: true\r\n    });\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleDecline = () => {\r\n    this.setState({\r\n      isEdited: false,\r\n      content: this.props.toDo.content\r\n    });\r\n  };\r\n  handleAccept = () => {\r\n    this.props.editItem(this.props.toDo.id, this.state.content);\r\n    this.setState({\r\n      isEdited: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Button onClick={this.deteleItem.bind(this)} text=\"X\" />\r\n        {!this.state.isEdited ? (\r\n          <>\r\n            <Button text=\"Edit\" onClick={this.editItem} />{\" \"}\r\n            {this.props.toDo.content}\r\n          </>\r\n        ) : (\r\n          <>\r\n            <input\r\n              className=\"edit_input\"\r\n              name=\"content\"\r\n              value={this.state.content}\r\n              onChange={this.handleChange}\r\n            />\r\n            <Button text=\"accept\" onClick={this.handleAccept} />\r\n            <Button text=\"decline\" onClick={this.handleDecline} />\r\n          </>\r\n        )}\r\n\r\n        <br />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListItem;\r\n","import React from \"react\";\r\nimport ListItem from \"../components/ListItem\";\r\n\r\nclass ListContainer extends React.Component {\r\n  render() {\r\n    let allToDos = this.props.toDos.map(toDo => {\r\n      return (\r\n        <li key={toDo.id}>\r\n          <ListItem toDo={toDo} deteleItem={this.props.handleDelete} editItem={this.props.handleEdit} />\r\n        </li>\r\n      );\r\n    });\r\n    return <div>{allToDos}</div>;\r\n  }\r\n}\r\n\r\nexport default ListContainer;\r\n","import React from \"react\";\r\nimport uuid from \"uuid/v4\";\r\n\r\nclass ListForm extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      content: \"\"\r\n    };\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    this.props.addToDos({\r\n      id: uuid(),\r\n      content: this.state.content\r\n    });\r\n    this.setState({\r\n      content: \"\"\r\n    });\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n    // console.log(this.state.content);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>add new todo</h3>\r\n        <form onSubmit={this.handleSubmit.bind(this)}>\r\n          <div className=\"label_elements\">\r\n            <label>\r\n              <input\r\n                placeholder=\"what is there to do?\"\r\n                id=\"content_input\"\r\n                onChange={this.handleChange.bind(this)}\r\n                name=\"content\"\r\n                value={this.state.content}\r\n              />\r\n            </label>\r\n            <br />\r\n            <input type=\"submit\" value=\"submit\" />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListForm;\r\n","const toDoData = [\r\n  {\r\n    id: 1,\r\n    content: \"wake up\"\r\n  },\r\n  {\r\n    id: 2,\r\n    content: \"eat\"\r\n  },\r\n  {\r\n    id: 3,\r\n    content: \"work out\"\r\n  }\r\n];\r\n\r\nexport default toDoData;\r\n","import React from \"react\";\r\nimport ListContainer from \"./ListContainer\";\r\nimport ListForm from \"./ListForm\";\r\nimport toDoData from \"../Data/ToDosData\";\r\n\r\nclass Todo extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      toDos: toDoData\r\n    };\r\n  }\r\n\r\n  // componentWillMount() {\r\n  //   this.setState({\r\n  //     toDos: toDoData\r\n  //   });\r\n  // }\r\n\r\n  handleDelete = id => {\r\n    let toDos = this.state.toDos;\r\n    let filteredEl = toDos.filter(el => el.id !== id);\r\n\r\n    this.setState({\r\n      toDos: filteredEl\r\n    });\r\n  };\r\n\r\n  handleAddTodos(newToDos) {\r\n    let addNewToDos = this.state.toDos;\r\n    addNewToDos.push(newToDos);\r\n    // console.log(this.state.toDos);\r\n    this.setState({ toDos: this.state.toDos });\r\n  }\r\n\r\n  handleEdit = (id, newContent) => {\r\n    let acceptEl = this.state.toDos.map(el => {\r\n      if (el.id === id) {\r\n        return { id, content: newContent };\r\n      } else {\r\n        return el;\r\n      }\r\n    });\r\n    this.setState({\r\n      toDos: acceptEl\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"main-holder\">\r\n        <ListForm addToDos={this.handleAddTodos.bind(this)} />\r\n        <ul>\r\n          <ListContainer\r\n            toDos={this.state.toDos}\r\n            handleDelete={this.handleDelete}\r\n            handleEdit={this.handleEdit}\r\n          />\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ToDo from \"./containers/ToDo\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <ToDo />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}