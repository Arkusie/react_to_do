{"version":3,"sources":["components/ProjectItem.jsx","containers/Projects.jsx","containers/AddProject.jsx","App.js","serviceWorker.js","index.js"],"names":["ProjectItem","id","console","log","this","props","onDelete","react_default","a","createElement","href","onClick","deleteProject","bind","project","title","category","Component","Projects","projectItems","_this","projects","map","components_ProjectItem","key","Fragment","AddProject","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newProject","e","refs","value","alert","setState","uuid","v4","addProject","preventDefault","categoryOptions","categories","onSubmit","handleSubmit","type","ref","defaultProps","App","newToDo","push","index","findIndex","x","splice","className","containers_AddProject","handleAddProject","containers_Projects","handleDeleteProject","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b653407c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass ProjectItem extends Component {\r\n  deleteProject(id) {\r\n    // it sould be executed in the main component(App),\r\n    //so it needs to be passed +2 up(into Projects and then into App)\r\n    console.log(\"delete test\");\r\n    this.props.onDelete(id);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <li>\r\n        <a href=\"#\" onClick={this.deleteProject.bind(this, this.props.project.id)}>\r\n          {\" \"}\r\n          X\r\n        </a>\r\n        {this.props.project.title} - {this.props.project.category}{\" \"}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectItem;\r\n","import React, { Component } from \"react\";\r\nimport ProjectItem from \"../components/ProjectItem\";\r\n\r\nclass Projects extends Component {\r\n  deleteProject(id) {\r\n    this.props.onDelete(id);\r\n  }\r\n\r\n  render() {\r\n    let projectItems;\r\n    //getting props from App.js, maping into projectItem\r\n    if (this.props.projects) {\r\n      projectItems = this.props.projects.map(project => {\r\n        // console.log(project);\r\n        return <ProjectItem onDelete={this.deleteProject.bind(this)} key={project.title} project={project} />;\r\n      });\r\n    }\r\n    console.log(this.props);\r\n\r\n    return (\r\n      <>\r\n        <h3>do it!</h3>\r\n        {projectItems}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Projects;\r\n","import React, { Component } from \"react\";\r\nimport uuid from \"uuid\";\r\nclass AddProject extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      newProject: {}\r\n    };\r\n  }\r\n  static defaultProps = {\r\n    categories: [\"common\", \"important\", \" uber important\"]\r\n  };\r\n\r\n  handleSubmit(e) {\r\n    if (this.refs.title.value === \"\") {\r\n      alert(\"title is required\");\r\n    } else {\r\n      this.setState(\r\n        {\r\n          newProject: {\r\n            id: uuid.v4(),\r\n            title: this.refs.title.value,\r\n            category: this.refs.category.value\r\n          }\r\n        },\r\n        //passing the submit to the App component\r\n        function() {\r\n          console.log(this.state);\r\n          this.props.addProject(this.state.newProject);\r\n        }\r\n      );\r\n    }\r\n    console.log(this.refs.title.value);\r\n    e.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    let categoryOptions = this.props.categories.map(category => {\r\n      return (\r\n        <option key={category} value={category}>\r\n          {category}\r\n        </option>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <h3>Add new ToDos</h3>\r\n        <form onSubmit={this.handleSubmit.bind(this)}>\r\n          <div>\r\n            <label>What is there to do? </label>\r\n            <input type=\"text\" ref=\"title\" />\r\n          </div>\r\n\r\n          <div>\r\n            <label>level of importance </label>\r\n            <select ref=\"category\">{categoryOptions}</select>\r\n          </div>\r\n          <input type=\"submit\" value=\"submit\" />\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddProject;\r\n","import React, { Component } from \"react\";\nimport uuid from \"uuid\";\nimport Projects from \"./containers/Projects\";\nimport AddProject from \"./containers/AddProject\";\n// import \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      projects: []\n    };\n  }\n\n  componentWillMount() {\n    this.setState({\n      projects: [\n        {\n          id: uuid.v4(),\n          title: \"Wake up\",\n          category: \"1\"\n        },\n        {\n          id: uuid.v4(),\n          title: \"eat breakfast\",\n          category: \"2\"\n        },\n        {\n          id: uuid.v4(),\n          title: \"do nothing\",\n          category: \"3\"\n        }\n      ]\n    });\n  }\n  //updating the state with submitted content\n  handleAddProject(newToDo) {\n    let projects = this.state.projects;\n    projects.push(newToDo);\n    this.setState({ projects: projects });\n  }\n\n  //get id from state, remove the project and reset the state\n  handleDeleteProject(id) {\n    let projects = this.state.projects;\n    //find the id, match to the current id, put it in the index\n    let index = projects.findIndex(x => x.id === id);\n    //\n    projects.splice(index, 1);\n    this.setState({ projects: projects });\n  }\n\n  //passing states into Projects as a prop\n  render() {\n    return (\n      <>\n        <div className=\"App\">React ToDo List</div>\n        <AddProject addProject={this.handleAddProject.bind(this)} />\n        <Projects projects={this.state.projects} onDelete={this.handleDeleteProject.bind(this)} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}